<idea-plugin>
    <id>com.bitfly.platform.laoyoutiao</id>
    <name>LaoYouTiao</name>
    <vendor email="xyb5to0ZCY@gmail.com" url="http://www.debuggerpowerzcy.top/about/">D8GER</vendor>

    <description>
        <![CDATA[LaoYouTiao is a multifunctional integrated plugin which is designed to remove repetitive activities at daily work.
        <p>
        JSON format, MySQL format, Time estimate, camel-underline convert, normal linux commands and wonderful regex!<br>
        老油条是一款JetBrains全平台产品的多功能整合插件, 旨在去除日常工作中的重复活动. <br>
        JSON美化|MySQL美化|时间推算, 字符串批处理, Linux命令工具, 正则表达式奇淫巧技. <br>
        <ul>
            <li><a href="https://github.com/caofanCPU/LaoYouTiao">项目|Project</a><br></li>
            <li><a href="http://www.debuggerpowerzcy.top/home/2020/03/14/D8gerAutoCode%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/">博客指南|Blog guide</a><br></li>
            <li><a href="http://file.debuggerpowerzcy.top/power/DYOU.mp4">视频教程</a>||||||
                <a href="https://www.youtube.com/watch?v=LZfC2_u-8aE">Video Manual</a><br>
            </li>
            <li><a href="https://github.com/caofanCPU/LaoYouTiao/blob/master/README_CN.md">新手教程</a>||||||
                <a href="https://github.com/caofanCPU/LaoYouTiao/blob/master/README.md">Tutorial</a><br>
            </li>
        </ul>
        </p>
        <img src="https://raw.githubusercontent.com/caofanCPU/LaoYouTiao/master/src/main/resources/icons/WxzHotDog.jpeg" /><br>
        ]]>
    </description>

    <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html
         on how to target different products -->
    <!-- uncomment to enable plugin in all products
    :<depends>com.intellij.modules.lang</depends>
    -->

    <extensions defaultExtensionNs="com.intellij"></extensions>

    <actions>
        <!-- refer https://www.iconfont.cn/manage/index?manage_type=myprojects&projectId=991968
                download 16.png as icon, 32.svg as plugin logo-->
        <!-- Add your customer group here -->
        <group id="ByteCry" text="ByteCry" description="ByteCry-LaoYouTiao" popup="true" icon="/icons/ByteCry.png">
            <add-to-group group-id="ToolsMenu" anchor="last"/>
            <separator/>

            <!-- Add your actions here -->
            <action id="D8GER-TimeEstimate" class="com.bitfly.platform.laoyoutiao.action.TimeEstimateAction" text="Time::Estimate" description="Time::Estimate" icon="/icons/Timer.png">
                <keyboard-shortcut keymap="$default" first-keystroke="alt shift ctrl H"/>
            </action>

            <action id="D8GER-BeautifulJSON" class="com.bitfly.platform.laoyoutiao.action.BeautifulJSONAction" text="Beautiful::JSON" description="Beautiful::JSON" icon="/icons/JetBeFaker.png">
                <keyboard-shortcut keymap="$default" first-keystroke="alt shift ctrl J"/>
            </action>

            <action id="D8GER-QRCodeLink" class="com.bitfly.platform.laoyoutiao.action.LinkAction" text="QRCode::Link" description="QRCode::Link" icon="/icons/Link.png">
                <keyboard-shortcut keymap="$default" first-keystroke="alt shift ctrl K"/>
            </action>

            <action id="D8GER-GraphEasy" class="com.bitfly.platform.laoyoutiao.action.GraphEasyAction" text="Graph::Easy" description="Graph::Easy" icon="/icons/XFinger.png">
                <keyboard-shortcut keymap="$default" first-keystroke="alt shift ctrl T"/>
            </action>

            <action id="D8GER-CamelUnderlineConvert" class="com.bitfly.platform.laoyoutiao.action.CamelUnderlineConvertAction" text="Camel::Underline" description="Camel::Underline" icon="/icons/UTime.png">
                <keyboard-shortcut keymap="$default" first-keystroke="alt shift ctrl U"/>
            </action>

            <action id="D8GER-SimplifyOneLine" class="com.bitfly.platform.laoyoutiao.action.SimplifyOneLineAction" text="Simplify::OneLine" description="Simplify::OneLine" icon="/icons/Simplify.png">
                <keyboard-shortcut keymap="$default" first-keystroke="alt shift ctrl S"/>
            </action>

            <action id="D8GER-BeautifulMySQL" class="com.bitfly.platform.laoyoutiao.action.BeautifulMySQLAction" text="Beautiful::MySQL" description="Beautiful::MySQL" icon="/icons/Beautiful.png">
                <keyboard-shortcut keymap="$default" first-keystroke="alt shift ctrl B"/>
            </action>

            <action id="D8GER-ByteNoDance" class="com.bitfly.platform.laoyoutiao.action.ByteNoDanceAction" text="Byte::NoDance" description="Byte::NoDance" icon="/icons/gitHub-cool.png">
                <keyboard-shortcut keymap="$default" first-keystroke="alt shift ctrl N"/>
            </action>
        </group>
    </actions>

    <idea-version since-build="162"/>

    <depends>com.intellij.modules.platform</depends>

    <change-notes>
        <![CDATA[
        <li>If you like LaoYouTiao, please star <a href="https://github.com/caofanCPU/LaoYouTiao">the source project</a> for supporting me, thanks!</li>
        <li><h1>2.6</h1></li>
        <ul>
        <li>Add: Time::Estimate for time estimate, 'cmd' + 'alt' + 'shift' + 'H', one of the scenarios is to easily calculate when the Redis cache is written, and the accuracy is supported to the ms level<br>
        <li>My expectation: It is not easy to insists on open source about 8 versions, but there are only a few 🌟 for this project, so I ask for your help: <a href="https://github.com/caofanCPU/LaoYouTiao">Give me a star</a>🌟, and share it with more friends about the funny from one-click!<br>
        <ul>
        <li>Basic grammar 1: '+' for estimating the future time, the current time will add the input data when calculating; '-'(default: non '+' nor '-') for estimating the past time, the current time will subtract the input data when calculating<br></li>
        <li>Basic grammar 2: Time unit definition: 'Y'=Year, 'M'=Month, 'd'=day, 'h'=hour, 'm'=minute, 's'=second, millisecond(default) with no time unit mark<br></li>
        <li>Basic grammar 3: Support any combination of time units, which is no order between 'YMdhms'(but I recommended maintain order), besides, it doesn't need to appear all the time utils, just use what you need<br></li>
        <li>For example 1: +10Y9M8d7h6m54s321, means the current time should execute: +10years+9months+8days+7hours+6minutes+54seconds+321milliseconds<br></li>
        <li>For example 2: -34h67m89s999999, means the current time should execute: -34hours-67minutes-89seconds-999999milliseconds<br></li>
        <li>For example 3: -5s1Y321000, means the current time should execute:-1year-5seconds-321000milliseconds<br></li>
        <li>Attention 1: The millisecond data must be put to the end if you need it<br></li>
        <li>Attention 2: The parsing rules limit the first input of the same time unit as a valid value, and the later data input will be ignored, for example: '2d3m4d5d9m' will only be parsed as '2d3m'<br></li>
        <li>Talk seems cheap, <a href="http://file.debuggerpowerzcy.top/power/Timer.gif">so show you a gif</a><br></li>
        </ul>
        </li>
        </ul>
        <li><h1>2.5</h1></li>
        <ul>
        <li>Add: QRCode::Link for creating QRCode, 'cmd' + 'alt' + 'shift' + 'K'<br>
        <ul>
        <li>Basic grammar: '@=@' is the key symbol of grammar parsing<br></li>
        <li>For example: D8GER@=@https://github.com/caofanCPU/LaoYouTiao<br></li>
        <li>And you'll see a window showing QRCode with the link: https://github.com/caofanCPU/LaoYouTiao<br></li>
        <li>Talk seems cheap, <a href="http://file.debuggerpowerzcy.top/power/QRCode.gif">so show you a gif</a><br></li>
        </ul>
        </li>
        </ul>
        <li><h1>2.4</h1></li>
        <ul>
        <li>Optimize: Graph::Easy will keep the user's original sentence, and then generate graphical text code comments, which is convenient for subsequent adjustments, 'cmd' + 'alt' + 'shift' + 'T'<br>
        <ul>
        <li>Basic grammar: '.' is the key symbol of grammar parsing<br></li>
        <li>For example: A.some text.B  means that node 'A' points node 'B' and the comment upper the arrow is 'some text'<br></li>
        <li>Talk seems cheap, <a href="http://file.debuggerpowerzcy.top/power/HERE.gif">so show you a gif</a><br></li>
        </ul>
        </li>
        </ul>
        <li><h1>2.3</h1></li>
        <ul>
        <li>Update: Graph::Easy now fully supports one-click generation of graphical text code comments, 'cmd' + 'alt' + 'shift' + 'T'<br>
        <ul>
        <li>Basic grammar: '.' is the key symbol of grammar parsing<br></li>
        <li>For example: A.some text.B  means that node 'A' points node 'B' and the comment upper the arrow is 'some text'<br></li>
        <li>Talk seems cheap, <a href="http://file.debuggerpowerzcy.top/power/HERE.gif">so show you a gif</a><br></li>
        </ul>
        </li>
        </ul>
        <li><h1>2.2</h1></li>
        <ul>
        <li>Update: Redo icon(<a href="https://github.com/caofanCPU/ImageMagick">Have a try?</a>)<br> </li>
        </ul>
        <li><h1>2.1</h1></li>
        <ul>
        <li>BugFix: Beautiful::JSON now support 'null' field for reserving origin text<br> </li>
        <li>About <a href="https://www.processon.com/view/5f96a5f35653bb06ef1870e8">DSP(D8ger Series Plan)</a> <br></li>
        </ul>
        <li><h1>2.0</h1></li>
        <ul>
        <li>Add: Support <a href="http://debuggerpowerzcy.top/home/2020/04/25/MacOS%E8%BD%AF%E4%BB%B6%E5%88%9D%E5%A7%8B%E5%8C%96/">Graph::Easy</a> for easier DSL, default shortcut is `alt` + `shift` + `cmd` + `T` <br> </li>
        <li>Adjust tool menus<br> <ul>
        <li>D8ger renamed to ByteCry<br></li>
        <li>BeautifulJSON renamed to Beautiful::JSON<br></li>
        <li>Add new tool item named Graph::Easy<br></li>
        <li>CamelUnderlineConvert renamed to Camel::Underline<br></li>
        <li>SimplifyOneLine renamed to Simplify::OneLine<br></li>
        <li>BeautifulMySQL renamed to Beautiful::MySQL<br></li>
        <li>D8gerNote renamed to Byte::NoDance<br></li>
        </ul>
        <li>About <a href="https://www.processon.com/view/5f96a5f35653bb06ef1870e8">DSP(D8ger Series Plan)</a> <br></li>
        </li>
        </ul>
        <li><h1>1.1</h1></li>
        <ul>
        <li>Add: Camel-Underline-Uppercase-Uncapitalize-Lowercase can be converted to each other by shortcut `alt` + `shift` + `cmd` + `U`, even timestamp-datetime convert <br> </li>
        <li>Add: JSON formatting and single line text conversion, supporting section and whole document, default shortcut `alt`+`shift`+`cmd`+`J` | `S` <br> </li>
        <li>Add: MySQL formatting, supporting section and whole document, default shortcut `alt`+`shift`+`cmd`+`J` | `B` <br> </li>
        <li>Add: Reserve easter eggs, edit the blank file in IDEA and enter `nasa` to get the NASA configuration file template. This is very useful and efficient for handling multi-lines, especially SQL field naming processing <br> </li>
        <li>Add: Reserve easter eggs, edit the blank file in IDEA and enter `regex` to get some commonly used regular expressions. Other code Easter eggs will be added later <br> </li>
        <li>Add: Reserve easter eggs, you can try to edit the blank file in IDEA and type `ohmyzsh` to get some useful shell commands and functions <br> </li>
        </ul>
        <li>中文</li>
        <li>觉得LaoYouTiao不错的,请给个🌟 <a href="https://github.com/caofanCPU/LaoYouTiao">插件地址</a>, 感谢老铁!</li>
        <li><h1>2.6</h1></li>
        <ul>
        <li>新增: Time::Calculate时间推算功能, 'cmd' + 'alt' + 'shift' + 'H', 其中场景之一是方便推算Redis缓存是什么时刻写入的, 精度支持到ms级别<br>
        <li>本人期望: 本项目坚持开源8个版本了, 实属不易, 而项目才几个🌟, 请老铁们为<a href="https://github.com/caofanCPU/LaoYouTiao">项目</a>打🌟并分享给更多的朋友, 让他们也爽一爽'一键'<br>
        <ul>
        <li>基础语法1: '+'是推算未来时间, 计算时会用当前时间加上输入数据; '-'(默认: 同时没有'+'或'-')是推算过去时间, 计算会用当前时间减去输入数据<br></li>
        <li>基础语法2: 时间单位定义: 'Y'=Year, 'M'=Month, 'd'=day, 'h'=hour, 'm'=minute, 's'=second, millisecond(默认) 不需要时间单位标识<br></li>
        <li>基础语法3: 支持时间单位任意组合, 即YMdhms之间是没有顺序的(但是建议顺序), 此外也不需要都出现<br></li>
        <li>示例1: +10Y9M8d7h6m54s321, 代表当前时间加上10年9月8天7小时6分钟54秒321毫秒<br></li>
        <li>示例2: -34h67m89s999999, 代表当前时间减去34小时67分钟89秒999999毫秒<br></li>
        <li>示例3: -5s1Y321000, 代表当前时间减去1年5秒321000毫秒<br></li>
        <li>注意1: 如果你需要计算毫秒数据, 请最后输入毫秒数据<br></li>
        <li>注意2: 解析规则限定同一个时间单位先输入的为有效值, 后输入的会被忽略, 例如: '2d3m4d5d9m'结果只会是'2d3m'<br></li>
        <li>话不多说, <a href="http://file.debuggerpowerzcy.top/power/Timer.gif">上图</a><br></li>
        </ul>
        </li>
        </ul>
        <li><h1>2.5</h1></li>
        <ul>
        <li>新增: QRCode::Link生成二维码, 'cmd' + 'alt' + 'shift' + 'K'<br>
        <ul>
        <li>基础语法: '@=@'为生成二维码的关键分割符号<br></li>
        <li>示例: 空白文本中输入, 帝八哥@=@https://github.com/caofanCPU/LaoYouTiao<br></li>
        <li>将生成访问作者的二维码(用于手机扫码)和浏览器跳转的'帝八哥'<br></li>
        <li>更多功能, 空白文本中输入'help', 将获取更过关键字, 其中包含大量高质量技术文章和技术大佬, 等你来发掘!<br></li>
        <li>话不多说, <a href="http://file.debuggerpowerzcy.top/power/QRCode.gif">上图</a><br></li>
        </ul>
        </li>
        </ul>
        <li><h1>2.4</h1></li>
        <ul>
        <li>优化: Graph::Easy保留用户输入原始语句, 再生成图形化文本代码注释, 方便后续调整, 'cmd' + 'alt' + 'shift' + 'T'<br>
        <ul>
        <li>基础语法: '.'为元素关键符号<br></li>
        <li>示例: A.文本.B  其含义为'A'节点指向'B'节点, 箭头上的注释为'文本'<br></li>
        <li>注意: 文本强烈建议使用英文, 中文由于编码问题会导致图形无法对齐<br></li>
        <li>话不多说, <a href="http://file.debuggerpowerzcy.top/power/HERE.gif">上图</a><br></li>
        </ul>
        </li>
        </ul>
        <li><h1>2.3</h1></li>
        <ul>
        <li>新增: Graph::Easy现在全力支持一键生成图形化文本代码注释, 'cmd' + 'alt' + 'shift' + 'T'<br>
        <ul>
        <li>基础语法: '.'为元素关键符号<br></li>
        <li>示例: A.文本.B  其含义为'A'节点指向'B'节点, 箭头上的注释为'文本'<br></li>
        <li>注意: 文本强烈建议使用英文, 中文由于编码问题会导致图形无法对齐<br></li>
        <li>话不多说, <a href="http://file.debuggerpowerzcy.top/power/HERE.gif">上图</a><br></li>
        </ul>
        </li>
        </ul>
        <li><h1>2.2</h1></li>
        <ul>
        <li>更新: 重做图标(<a href="https://github.com/caofanCPU/ImageMagick">试一试</a>)<br> </li>
        </ul>
        <li><h1>2.1</h1></li>
        <ul>
        <li>修复: Beautiful::JSON在美化时支持'null'字段<br> </li>
        <li>RoadMap参见<a href="https://www.processon.com/view/5f96a5f35653bb06ef1870e8">DSP(D8ger Series Plan)</a> <br></li>
        </ul>
        <li><h1>2.0</h1></li>
        <ul>
        <li>新增<a href="http://debuggerpowerzcy.top/home/2020/04/25/MacOS%E8%BD%AF%E4%BB%B6%E5%88%9D%E5%A7%8B%E5%8C%96/">Graph::Easy</a>语法简化支持, 默认快捷键`alt` + `shift` + `cmd` + `T`.<br> </li>
        <li>菜单工具栏调整<br>
        <ul>
        <li>D8ger重命名为ByteCry<br></li>
        <li>BeautifulJSON重命名为Beautiful::JSON<br></li>
        <li>新增Graph::Easy<br></li>
        <li>CamelUnderlineConvert重命名为Camel::Underline<br></li>
        <li>SimplifyOneLine重命名为Simplify::OneLine<br></li>
        <li>BeautifulMySQL重命名为Beautiful::MySQL<br></li>
        <li>D8gerNote重命名为Byte::NoDance<br></li>
        </ul>
        </li>
        </ul>
        <li><h1>1.1</h1></li>
        <ul>
        <li>自从'今日油条'被'今日头条'起诉侵权后, 本人夙兴夜寐, 久不得眠.<br> </li>
        <li>连隔壁王家的撕葱都要一口吞的好油条, 怎么就被干趴了呢?<br> </li>
        <li>经过以下一系列的探索:<br> </li>
        <li>1.一键JSON美化与简化(以及剔除空白字符)<br> </li>
        <li>2.一键MySQL格式化<br> </li>
        <li>3.一键驼峰下划线(以及'-'拼接)自由转化, 居然还可以转换时间戳, 你敢信?<br> </li>
        <li>4.彩蛋集锦, 字符串批处理(对齐), 正则表达式的奇淫巧技<br> </li>
        <li>终究悟得真相: 油条虽好, 但不够老道! 丰富的工作去重经验助你省时免坑, 请认准独家: LaoYouTiao(老油条)<br> </li>
        </ul>
        </br>
        ]]>
    </change-notes>
</idea-plugin>